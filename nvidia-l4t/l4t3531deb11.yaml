#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Simple recipe that use a docker image directly.
#
# It is made to conserve docker layers for the exported image.  No setup section
# is provided: You have to implement yours
#
#==============================================================================
---
extend: ../steps/backend/$${backend}.yaml

# Loads some helpful aliases (this files are located in steps/aliases/ directory)
aliases: defaults.yaml

# Custom shell environement (this files are located in steps/env/ directory)
env:
  - bashrc
  - functions.sh

# Global variables use by Kameleon engine and the steps
global:
  ## Select backend for in context isolation
  backend: docker

  # Docker image to use for the out context with debootstrap
  out_context_distrib: "ubuntu"
  out_context_release: "20.04"
  out_context_docker_image: "$${out_context_distrib}:$${out_context_release}"
  out_context_debian_backports: false

  target_docker_image: "$${kameleon_recipe_name}"
  # Default root password
  root_password: kameleon
  # Target system architecture
  arch: aarch64
  deb_arch: arm64
  deb_kernel_arch: $${deb_arch}

  rootfs: "$${l4t_dir}/rootfs"
  workdir: "/nvidia"
  l4t_dir: "$${workdir}/Linux_for_Tegra"
  nvidia_BSP_url: "https://developer.download.nvidia.com/embedded/L4T/r35_Release_v3.1/release/Jetson_Linux_R35.3.1_aarch64.tbz2"
  nvidia_sample_fs_url: "https://developer.nvidia.com/downloads/embedded/l4t/r35_release_v3.1/release/tegra_linux_sample-root-filesystem_r35.3.1_aarch64.tbz2"
  cross_compilation_toolchain_url: "https://developer.nvidia.com/embedded/jetson-linux/bootlin-toolchain-gcc-93"
  cross_compilation_toolchain_dir: "$${workdir}/toolchain"
  cti_BSP_url: "https://connecttech.com/ftp/Drivers/CTI-L4T-AGX-35.3.1-V001.tgz"
  cti_kernel_sources_url: "http://www.connecttech.com/ftp/dropbox/82429_cti-l4t-src-agx-35.3.1-v001.tgz" 
  l4t_kernel_version: "5.10"
  l4t_kernel_config_file: "cti_tegra_defconfig"
  debian_kernel_pkg_url: "http://ftp.fr.debian.org/debian/pool/main/l/linux/linux-image-5.10.0-20-arm64-unsigned_5.10.158-2_arm64.deb"
  src_dir: $${workdir}/src
  kernel_src_dir: $${src_dir}/kernel/kernel-$${l4t_kernel_version}
  kernel_build_dir: $${src_dir}/build
  kernel_version_suffix: -l4t3531deb11
  kernel_make_cmd: "make -C $${kernel_src_dir} -j $(nproc) ARCH=arm64 LOCALVERSION=$${kernel_version_suffix} CROSS_COMPILE=$${cross_compilation_toolchain_dir}/usr/bin/aarch64-buildroot-linux-gnu-"

bootstrap:
  - "@base"
  - prepare_out_system:
    - on_checkpoint: disable
    - update_lists:
      - apt-get_out: update
    - upgrade_system:
      - apt-get_out: upgrade
    - install_required_packages:
      - apt-get_out: install wget tar bzip2 xz-utils zstd qemu-user-static
setup:
  - install_nvidia_BSP:
    - download_and_extract_nvidia_BSP:
      - exec_out: mkdir -p $${workdir}
      - exec_out: wget -O- -q "$${nvidia_BSP_url}" | tar -C $${workdir} -jxv
  - install_nvidia_sample_filesystem:
    - download_and_extract_nvidia_sample_filesystem:
      - exec_out: mkdir -p $${workdir}
      - exec_out: wget -O- -q "$${nvidia_sample_fs_url}" | tar -C $${rootfs} -jxv
  - install_cti_BSP:
    - download_and extract_cti_BSP:
      - on_checkpoint: disabled
      - exec_out: wget -O- -q "$${cti_BSP_url}" | tar -C $${l4t_dir} -zxv
      - exec_out: cd $${l4t_dir}/CTI-L4T && bash -e ./install.sh
      - exec_out: rm -rf $${l4t_dir}/CTI-L4T 
    # TO REMOVE ONCE FIXED IN THE NEXT CTI BSP VERSION
    - fix_apply_binaries:
      - exec_out: sed -i.bak -e '/getopt/s/b:t:/t/' $${l4t_dir}/apply_binaries.sh
    - fix_kernel_console:
      - exec_out: sed -i.bak -e 's/console=tty0 //' $${l4t_dir}/cti-agx.conf.common
    - remove_CTI_kernel:
      - exec_out: rm $${l4t_dir}/kernel/nvidia-l4t-*.deb
  - install_kernel_sources:
    - install_cross_compilation_chain:
      - exec_out: mkdir -p "$${cross_compilation_toolchain_dir}"
      - exec_out: wget -O- -q "$${cross_compilation_toolchain_url}" | tar -C $${cross_compilation_toolchain_dir} -zxv
    - download_and_extract_cti_kernel_sources:
      - on_checkpoint: disabled
      - exec_out: mkdir -p $${src_dir}
      - exec_out: wget -O- -q "$${cti_kernel_sources_url}" | tar -C $${src_dir} -zxv
    # TO REMOVE ONCE FIXED IN THE NEXT CTI BSP VERSION
    - fix_cti_kernel:
      - on_checkpoint: disabled
      - exec_out: sed -i -e 's/^#include "aquantia.h"$/#include "cti_aquantia.h"/' $${src_dir}/kernel/cti/drivers/net/phy/*
    - download_and_extract_debian_kernel_config:
      - exec_out: mkdir -p $${workdir}/tmp
      - exec_out: wget -O- -q $${debian_kernel_pkg_url} | dpkg -X - $${workdir}/tmp
      - exec_out: cp $${workdir}/tmp/boot/config-* $${kernel_src_dir}/arch/arm64/configs/debian_defconfig
      - exec_out: rm -r $${workdir}/tmp
  - build_kernel:
    - install_tools:
      - apt-get_out: install make gcc xxd flex bison python3 bc rsync kmod libelf-dev libssl-dev
    - merge_kernel_configs:
      - exec_out: |
          set -e
          cd $${kernel_src_dir}/arch/arm64/configs
          cat debian_defconfig $${l4t_kernel_config_file} > debian_l4t_defconfig
          echo "Apply merged kernel configs:"
          $${kernel_make_cmd} debian_l4t_defconfig
    - force_some_debian_kernel_configs:
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          echo "Force some debian kernel configs:"
          i=0
          grep -e "^CONFIG_NF_TABLES" -e "^CONFIG.*_NFT_" -e "^CONFIG.*_NF_" -e "^CONFIG.*_NETFILTER" \
               -e "^CONFIG_DUMMY" \
               -e "^CONFIG_JOLIET" -e "^CONFIG_ZISOFS" \
               -e "^CONFIG.*_NETLINK" \
               -e "^CONFIG_IPMI" \
               -e "^CONFIG_SCSI_FC_ATTRS" -e "^CONFIG_TARGET_CORE" \
               -e "^CONFIG_ISCSI_TARGET" -e "^CONFIG_ISCSI_TCP" -e "^CONFIG_SCSI_ISCSI_ATTRS" \
                arch/arm64/configs/debian_defconfig \
          | while IFS= read l; do
            echo $l
            c=${l%=*}
            case $l in
              CONFIG_*=y)
                ./scripts/config --enable $c
                ;;
              CONFIG_*=m)
                ./scripts/config --module $c
                ;;
            esac
          done
    - finalize_kernel_configs:
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          cp .config arch/arm64/configs/debian_l4t_defconfig
          $${kernel_make_cmd} debian_l4t_defconfig
          #diff --brief .config $${kernel_src_dir}/arch/arm64/configs/debian_l4t_defconfig
    - disable_bogus_configs:
      - on_checkpoint: disabled
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          ./scripts/config --set-str SYSTEM_TRUSTED_KEYS ""
          for c in DMA_BCM2835 DRM_TEGRA DMA_SUN6I FSL_EDMA FSL_QDMA QCOM_BAM_DMA K3_DMA SCSI_UFSHCD_PCI TEGRA_HOST1X DEBUG_INFO_BTF VIDEO_CX231XX_DVB; do
            ./scripts/config --disable $c
          done
    #- force_builtin_nfs_support:
    #  - on_checkpoint: disabled
    #  - exec_out: |
    #      set -e
    #      cd $${kernel_src_dir}
    #      # NEEDED FOR NFSROOT
    #      ./scripts/config --enable NFS_V4
    #      ./scripts/config --enable NFS_V3
    #      ./scripts/config --enable NFS_V2
    - force_nvethernet_as_module:
      - on_checkpoint: disabled
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          ./scripts/config --module NVETHERNET
          ./scripts/config --enable NVETHERNET_SELFTESTS
          ./scripts/config --module PTP_1588_CLOCK
          ./scripts/config --module PPS
          ./scripts/config --module MICREL_PHY
    - disable_useless_kernel_support:
      - on_checkpoint: disabled
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          ./scripts/config --disable USB_SUPPORT
          ./scripts/config --disable WLAN
          ./scripts/config --disable WIRELESS
          ./scripts/config --disable WIMAX
          ./scripts/config --disable BT
          ./scripts/config --disable NFC
          ./scripts/config --disable HAMRADIO
          ./scripts/config --disable SOUND
          ./scripts/config --disable RFKILL
          ./scripts/config --disable CAN
          ./scripts/config --disable W1
          ./scripts/config --disable GNSS
          ./scripts/config --disable PARPORT
          #./scripts/config --disable MEDIA_SUPPORT
          ./scripts/config --disable MEMSTICK
          ./scripts/config --disable SOUNDWIRE
    - disable_kernel_debug_info:
      - on_checkpoint: disabled
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          ./scripts/config --disable DEBUG_INFO
    #- dive_in: &1
    #  - on_checkpoint: disabled
    #  - apt-get_out: install libncurses-dev
    #  - exec_local: |
    #      echo "Kernel make command: $${kernel_make_cmd}"
    #  - breakpoint
    - build_kernel_objects:
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          $${kernel_make_cmd} Image
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          $${kernel_make_cmd} dtbs
      - exec_out: |
          set -e
          cd $${kernel_src_dir}
          $${kernel_make_cmd} modules
    #- dive_in_again: *1
    - install_kernel_objects:
      - exec_out: |
          cp $${kernel_src_dir}/arch/arm64/boot/Image $${l4t_dir}/kernel/
      - exec_out: |
          cp $${kernel_src_dir}/arch/arm64/boot/dts/nvidia/* $${l4t_dir}/kernel/dtb/
      - exec_out: |
          set -e
          KERNEL_RELEASE=$($${kernel_make_cmd} kernelrelease | grep -ve '^make')
          # ugly ack to please Nvidia's apply_binaries.sh script.
          EXTMOD_DIR=$(grep -e '^\s*EXTMOD_DIR=' $${l4t_dir}/apply_binaries.sh | sed -e 's/^.*=//')
          $${kernel_make_cmd} INSTALL_HDR_PATH="$${rootfs}/usr/src/linux-headers-$KERNEL_RELEASE-$EXTMOD_DIR" headers_install
          tar -C $${rootfs}/usr/src -jcvf $${l4t_dir}/kernel/kernel_headers.tbz2 linux-headers-$KERNEL_RELEASE-$EXTMOD_DIR
      - exec_out: |
          set -e
          KERNEL_RELEASE=$($${kernel_make_cmd} kernelrelease | grep -ve '^make')
          $${kernel_make_cmd} INSTALL_MOD_PATH="$${rootfs}" modules_install
          ln -sfn /usr/src/linux-headers-$KERNEL_RELEASE $${rootfs}/lib/modules/$KERNEL_RELEASE/build
          tar -C $${rootfs} -jcvf $${l4t_dir}/kernel/kernel_supplements.tbz2 lib/modules/$KERNEL_RELEASE
  - remove_kernel_sources:
    - delete_toolchain:
      - exec_out: rm -rf $${workdir}/toolchain
    - delete_sources:
      - exec_out: rm -rf $${workdir}/src
  - setup_for_flashing:
    - install_required_debs:
      - apt-get_out: install usbutils udev python-is-python3 python3-yaml lz4 cpio openssh-client libxml2-utils perl-modules-5.30 dosfstools
  - prepare_nvidia_flash:
    - prebuild_flash_image:
      - exec_out: |
          set -e
          cd $${l4t_dir}
          ./flash.sh --no-flash cti/xavier/rogue/base mmcblk0p1
    - delete_rootfs:
      - exec_out: rm -rf $${rootfs}/*
export:
  - export_BSP_tarball:
    - create_BSP_tarball:
      - exec_out: tar -C $${workdir} -zcvf $${workdir}/$${kameleon_recipe_name}.tgz Linux_for_Tegra
      - out2local:
        - $${workdir}/$${kameleon_recipe_name}.tgz
        - $${kameleon_recipe_name}/$${kameleon_recipe_name}.tgz
      - exec_out: rm $${workdir}/$${kameleon_recipe_name}.tgz
  - export_docker_image_ready_to_flash:
    - commit_and_configure_to_flash:
      - exec_local: |
          set -e
          # Stop the current docker container so that we can configure the image
          docker stop $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null || docker kill $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
          # Create the final version of the image, ready to flash
          docker commit -c 'ENV USER=root' -c 'WORKDIR $${l4t_dir}' -c 'ENTRYPOINT ["./flash.sh"]' $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) $${target_docker_image} > /dev/null
          # Delete the container
          docker rm $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
          rm -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
    - explain_how_to_flash:
      - exec_local: |
          echo 'You can now flash a Xavier module with the Kadeploy miniOS, using:'
          echo
          echo '$ docker run -it --rm --privileged -v /dev/bus/usb:/dev/bus/usb/ -v /dev:/dev $${target_docker_image} cti/xavier/rogue/base mmcblk0p1'
          echo
          echo 'To test a kernel/initrd with grub, copy to a node:'
          echo '$ scp rootfs/boot/Image rootfs/boot/initrd root@estats-9.toulouse.grid5000.fr:'
