#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Recipe to build a custom Grid'5000 environment on top of an
# existing pre-built one (such as one supported by the technical team).
# The recipe takes a environment name, and first extracts its image tarball
# before letting define some customizations in the setup section. It then
# export the new environment. This recipe does not rebuild the Grid'5000
# environment from scratch: neither the distribution installer nor Puppet is
# involved. The recipe must be built on a Grid'5000 node.
#
#==============================================================================
# This recipe extends another. To look at the step involed, run:
#   kameleon dryrun debiantesting-arm64-custom.yaml
# To see the variables that you can override, use the following command:
#   kameleon info debiantesting-arm64-custom.yaml
---
extend: base.yaml

global:
  ### Grid'5000 environment information
  ## (Uncomment and change any line if needed)

  ## Frontend to run kaenv3 on
  #grid5000_frontend: "frontend"

  ## Site used in the build
  grid5000_site: "toulouse"

  ## Environment to build from
  grid5000_environment_import_name: "ubuntu2004-nfs"
  grid5000_environment_import_user: "deploy"
  grid5000_environment_import_arch: "$${arch}"
  #grid5000_environment_import_version: ""

  ## New environment description
  grid5000_environment_export_name: "ubuntu2004-nfsl4t"
  grid5000_environment_export_alias: "ubuntu-arm64-nfsl4t"
  grid5000_environment_export_format: "tar.zst"
  grid5000_environment_export_description: "Customized $${grid5000_environment_import_name} for Nvidia Tegra"
  grid5000_environment_export_author: "deploy"
  grid5000_environment_export_visibility: "shared"
  grid5000_environment_export_boot_kernel: "/boot/Image"
  grid5000_environment_export_boot_initrd: "/boot/initrd"
  grid5000_environment_export_boot_kernel_params: ""
  grid5000_environment_export_custom_variables: "BOOTLOADER_NO_GRUB_MKCONFIG_FROM_DEST=1"

  ## Set where to store the environment and the assiated kadeploy URL base
  grid5000_environment_export_dir: "/grid5000/l4t/"
  grid5000_environment_export_baseurl: "server:///grid5000/l4t/"

  ## Optionaly, the environment postinstall script can be changed, e.g. to
  ## enable NFS homes, LDAP accounts, if not enabled in the imported env.
  #grid5000_environment_export_postinstall_script: "g5k-postinstall --net debian --fstab nfs --restrict-user current"

  ## Optionaly, an additional postinstall can be given, e.g. to do some custom
  ## operations. Use the following variables to set the archive name and script.
  #grid5000_environment_export_additional_postinstall_archive: "$${kameleon_recipe_name}-additional-postinstall.tar.gz"
  #grid5000_environment_export_additional_postinstall_script: "additional_postinstall.sh"
  ## The recipe will have to prepare the additional postinstall content in a
  ## directory to create in the local context and name "additional_postinstall"
  ## by default (next line to change it). The archive is created by the export.
  #grid5000_environment_export_additional_postinstall_dir: "additional_postinstall"

  ### Target machine/CPU architecture
  ## If building an environment for another architecture than x86_64, uncomment
  ## and adapt the next lines.
  ## The following works for ARM64 machines, just uncomment for such machines.
  arch: aarch64
  #qemu_arch: aarch64

  backend: docker
  docker_cleanup_section: setup
  sdkmanager_docker_archive: /grid5000/l4t/sdkmanager-1.9.3.10904-Ubuntu_20.04_docker.tar.gz
  out_context_docker_image: sdkmanager:1.9.3.10904-Ubuntu_20.04
  # See https://connecttech.com/resource-center/l4t-board-support-packages/ to find out what version of Jetpack can be used ans the cti_BSP_url
  jetpack_version: 5.1.1
  cti_BSP_url: "https://connecttech.com/ftp/Drivers/CTI-L4T-AGX-35.3.1-V001.tgz"
  jetson_target: JETSON_AGX_XAVIER_TARGETS 
  # See sdkmanager's GUI or sdkmanager --query to find out the available components and additional SDK
  #jetpack_components: "--select 'Jetson Linux' --select 'Jetson Runtime Components' --select 'Jetson SDK Components' --deselect 'Developer Tools' --additionalsdk 'DeepStream 6.2'"
  jetpack_components: "--select 'Jetson Linux' --deselect 'Jetson Runtime Components' --deselect 'Jetson SDK Components' --deselect 'Developer Tools'"
  workdir: "/home/nvidia"
  l4t_dir: "$${workdir}/nvidia/nvidia_sdk/JetPack_$${jetpack_version}_Linux_$${jetson_target}/Linux_for_Tegra"
  rootfs: "$${workdir}/g5k-rootfs"
  upstream_image: "$${kameleon_cwd}/g5k-image.tar"

bootstrap:
  - install_sdkmanager:
    - install_docker_archive:
      - exec_local: |
          set -e
          if [ -z "$(docker image ls -q '$${out_context_docker_image}')" ]; then
              if ! [ -r "$${sdkmanager_docker_archive}" ]; then
                  echo "Could not access the sdkmanager docker archive at '$${sdkmanager_docker_archive}'. Please provide it." 1>&2
                  echo "It can be downloaded at https://developer.nvidia.com/sdk-manager" 1>&2
                  exit 1
              fi
              docker load -i $${sdkmanager_docker_archive}
          else
              echo "sdkmanager docker image already available"
          fi
  - "@base"
  - prepare_rootfs:
    - install_necessary_debs:
      - apt-get_out: install zstd lbzip2
  - fetch_grid5000_image
  - deploy_image_in_rootfs:
    - copy_image_in_out:
      - local2out:
        - $${upstream_image}
        - $${upstream_image}
    - clean_rootfs:
      - exec_out: rm -rf $${rootfs} && sudo -u nvidia mkdir -p $${rootfs}
    - extract_image_in_rootfs:
      - exec_out: tar -C $${rootfs} -xf $${upstream_image}
    - remove_image:
      - exec_out: rm $${upstream_image}
setup:
  - install_L4T:
    - sdkmanager_download:
      - exec_out: |
          set -eo pipefail
          sudo -u nvidia sdkmanager --license accept --staylogin true --datacollection disable --logintype devzone --product Jetson --targetos Linux --version $${jetpack_version} --target $${jetson_target} $${jetpack_components} --flash skip --exitonfinish --cli downloadonly > /tmp/sdkmanager.log &
          while ! [ -r /tmp/sdkmanager.log ] || ! grep http /tmp/sdkmanager.log; do
            sleep 1
          done
          echo
          echo "Please use the URL above, and follow Nvidia's authentication procedure to allow sdkmanager to continue."
          echo
          while ! grep -B 8 initialized /tmp/sdkmanager.log; do
            sleep 1
          done
          echo
          echo "Now just wait, this may be pretty long!"
          echo
          wait
          if ! strings /tmp/sdkmanager.log | grep -A 100 "DOWNLOAD COMPLETED SUCCESSFULLY"; then
              echo "Download failed!" 1>&2
              exit 1
          fi
    - sdkmanager_install:
      - exec_out: |
          set -eo pipefail
          sudo -u nvidia sdkmanager --license accept --staylogin true --datacollection disable --logintype devzone --product Jetson --targetos Linux --version $${jetpack_version} --target $${jetson_target} $${jetpack_components} --flash skip --exitonfinish --cli install > /tmp/sdkmanager.log &
          while ! grep -B 8 initialized /tmp/sdkmanager.log; do
            sleep 1
          done
          echo
          echo "Now just wait, this may be pretty long!"
          echo
          wait
          if ! strings /tmp/sdkmanager.log | grep -A 100 "INSTALLATION COMPLETED SUCCESSFULLY"; then
              echo "Install failed!" 1>&2
              exit 1
          fi
    - install_cti_BSP:
      - apt-get_out: install wget
      - exec_out: wget --progress=dot:giga -O- $${cti_BSP_url} | sudo -u nvidia tar -zx -C $${l4t_dir}
      - exec_out: cd $${l4t_dir}/CTI-L4T && ./install.sh
    - fix_cti_BSP_kernel_console:
      - exec_out: sudo -u nvidia sed -i.bak -e 's/console=tty0 //' $${l4t_dir}/cti-agx.conf.common
  - apply_L4T_overlay_over_g5k_ubuntu:
    - prepare_g5k_ubuntu_system:
      - exec_out: &1 |
          set -e
          mv $${rootfs}/etc/resolv.conf{,.orig}
          cp /etc/resolv.conf $${rootfs}/etc/resolv.conf
          mkdir -p $${rootfs}/{dev,dev/pts,proc,sys}
          mount -t sysfs sysfs $${rootfs}/sys
          mount -t proc proc $${rootfs}/proc
          mount --bind /dev $${rootfs}/dev
          mount --bind /dev/pts $${rootfs}/dev/pts
      - apt-get_in: update
      - apt-get_in: -q=2 remove --purge linux-image-* linux-modules-* linux-headers-*
      - apt-get_in: install libegl1 python2 libcairo2 libegl1-mesa libgles2 libgtk-3-0 libwayland-egl1 libxkbcommon0 libasound2 libgstreamer1.0-0 libgstreamer-plugins-bad1.0-0 libgstreamer-plugins-base1.0-0 device-tree-compiler libdatrie1 libfontconfig1 libharfbuzz0b libpangoft2-1.0-0 libpixman-1-0 libxrender1 libfontconfig1 libpango-1.0-0 libpangocairo-1.0-0 libnl-route-3-200 libevdev2 libinput10 libjpeg-turbo8 libunwind8 libwayland-cursor0
      - exec_out: &2 |
          set -e
          rm $${rootfs}/etc/resolv.conf
          mv $${rootfs}/etc/resolv.conf{.orig,}
          umount $${rootfs}/dev/pts
          umount $${rootfs}/dev
          umount $${rootfs}/proc
          umount $${rootfs}/sys
    - apply_l4t_binaries:
      - exec_out: $${l4t_dir}/apply_binaries.sh -r $${rootfs}
    - fix_l4t_services:
      - exec_out: *1
      - exec_in: |
          set -e
          systemctl disable nv-l4t-bootloader-config.service
          systemctl disable nv-l4t-usb-device-mode.service
      - exec_out: *2
  - create_new_kadeploy_image:
    - create_tarball:
      - on_checkpoint: disabled
      - exec_out: |
          set -e
          declare -a tar_cmd
          tar_cmd=(tar -C $${rootfs} --zstd -cvf $${appliance_filename}.$${grid5000_environment_export_format})
          for i in $${appliance_tar_excludes}; do
            tar_cmd=("${tar_cmd[@]}" "--exclude='$i'")
          done
          tar_cmd=("${tar_cmd[@]}" .)
          eval "${tar_cmd[@]}"
    - copy2local:
      - on_checkpoint: disabled
      - out2local:
        - $${appliance_filename}.$${grid5000_environment_export_format}
        - $${appliance_filename}.$${grid5000_environment_export_format}
    - remove_file_from_out:
      - on_checkpoint: disabled
      - exec_out: rm -f $${appliance_filename}.$${grid5000_environment_export_format}
export:
  - export_modified_g5k_env
