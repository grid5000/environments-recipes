#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Simple recipe that use a docker image directly.
#
# It is made to conserve docker layers for the exported image.  No setup section
# is provided: You have to implement yours
#
#==============================================================================
---
extend: ../steps/backend/$${backend}.yaml

# Loads some helpful aliases (this files are located in steps/aliases/ directory)
aliases: defaults.yaml

# Custom shell environement (this files are located in steps/env/ directory)
env:
  - bashrc
  - functions.sh

global:
  ssh_config_file: $${kameleon_cwd}/ssh_config

  backend: dockerzchroot

  # You should specify this in the global of your recipe
  out_context_docker_image: "l4t3521-deb11-light"

  rootfs_container_work_dir: "$${l4t_dir}/rootfs"

  workdir: "/nvidia"
  l4t_dir: "$${workdir}/Linux_for_Tegra"
  g5k_env_std_tarball_file: "/grid5000/images/debian11-arm64-std-2023010308.tar.zst"
  g5k_check_deb_file: "../../g5k-checks_0.11.11_arm64.deb"

bootstrap:
  - "@base"
setup:
  - deploy_g5k_env_std_in_rootfs:
    - install_necessary_debs:
      - apt-get_out: install zstd lbzip2
    - extract_rootfs:
      - exec_out: tar -C $${rootfs_container_work_dir} --zstd -xvf $${g5k_env_std_tarball_file}
  - apply_l4t_binaries:
    - apply_l4t_binaries:
      - exec_out: $${l4t_dir}/apply_binaries.sh -r $${rootfs_container_work_dir} --target-overlay
  - prepare_system_fs_for_chroot
  - fix_os_after_nvidia_script:
    - rebuild_ld_cache:
      - exec_in: ldconfig
    - disable_nvidia_first_boot:
      - exec_in: rm /etc/nv/nvfirstboot
    - disable_unwanted_tegra_systemd:
      - exec_in: systemctl disable nvargus-daemon.service
      - exec_in: systemctl disable nv-l4t-usb-device-mode.service
      - exec_in: systemctl disable nv-l4t-bootloader-config.service
    - configure_nvpmodel_all_core:
      - exec_in: |
          set -e
          dpkg-divert --no-rename /etc/systemd/nvpmodel.sh
          sed -i.distrib -e 's@^\([[:space:]]*/usr/sbin/nvpmodel\) -f /etc/nvpmodel.conf@&\n\1 -m 3@' /etc/systemd/nvpmodel.sh
  - g5kify_os:
    - nfsrootify_dhclient_script:
      - exec_in: |
          set -e
          dpkg-divert --no-rename /sbin/dhclient-script
          sed -i.distrib -e '214,224s/^/#G5Knfsroot/;231,299s/^/#G5Knfsroot/;306,321s/^/#G5Knfsroot/;326,379s/^/#G5Knfsroot/;' /sbin/dhclient-script
    - truify_ipmitool:
      - exec_in: |
          set -e
          dpkg-divert --rename /usr/bin/ipmitool
          ln -s /bin/true /usr/bin/ipmitool
    - upgrade_g5k_check:
      - local2in:
        - $${g5k_check_deb_file}
        - /tmp/g5k-check.deb
      - exec_in: |
          dpkg --force-confnew -i /tmp/g5k-check.deb
  - copy_kernel_sources_in_rootfs:
    - copy_files:
      - exec_out: |
          KERNEL_RELEASE=$(tar -tvf $${l4t_dir}/kernel/kernel_supplements.tbz2 | head -n 1 | sed -e 's@^.*lib/modules/\([^/]\+\).*$@\1@' || true)
          cp -a $${l4t_dir}/src/kernel/kernel-* $${rootfs_container_work_dir}/usr/src/linux-kbuild-$KERNEL_RELEASE
          ln -sfn /usr/src/linux-kbuild-$KERNEL_RELEASE $${rootfs_container_work_dir}/lib/modules/$KERNEL_RELEASE/source
          set -e
export:
  - export_zfs_rootfs
