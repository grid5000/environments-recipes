- copy_autoinstall_script_to_http_directory:
  - test:
    - exec_local: test "$${installer_iso_rebuild}" == "true"
    # Rebuild iso for Autoinstall/cloud-init if qemu-sendkeys is not working (currently under arm64 arch)
    - group:
      - check_cmd_local: 7z
      - check_cmd_local: xorriso
      - check_cmd_local: fdisk
      - exec_local: |
          ISO_WORKING_DIR="iso-temp"
          echo "Extract iso using 7z"
          mkdir -p "${ISO_WORKING_DIR}"
          7z x "$${qemu_iso_path}" -x'![BOOT]' "-o${ISO_WORKING_DIR}"
          echo "Extract efi.img"
          SECTOR_START=$(/sbin/fdisk -l "$${qemu_iso_path}" | grep iso2 | awk '{print $2}')
          SECTOR_COUNT=$(/sbin/fdisk -l "$${qemu_iso_path}" | grep iso2 | awk '{print $4}')
          dd if="$${qemu_iso_path}" bs=512 skip="${SECTOR_START}" count="${SECTOR_COUNT}" of="${ISO_WORKING_DIR}/boot/grub/efi.img"
          echo "Update boot with cloud-init autoinstall"
          sed -i "s|quiet \-\-\-|autoinstall \'ds=nocloud-net;s=http://$${local_ip}:8000/autoinstall/\' ---|" "${ISO_WORKING_DIR}/boot/grub/grub.cfg"
          sed -i "s/^set timeout=.*/set timeout=3/" "${ISO_WORKING_DIR}/boot/grub/grub.cfg"
          echo "Rebuild iso"
          # "Disable" md5 checksum
          md5sum "${ISO_WORKING_DIR}/.disk/info" | sed "s|${ISO_WORKING_DIR}/|./|" > "${ISO_WORKING_DIR}/md5sum.txt"
          xorriso -as mkisofs -r -V 'Ubuntu_Server_Custom' -o "$${qemu_iso_path}-new" -J -joliet-long -e boot/grub/efi.img -no-emul-boot -append_partition 2 0xef "${ISO_WORKING_DIR}/boot/grub/efi.img" -partition_cyl_align all "${ISO_WORKING_DIR}"
          # replace iso
          mv "$${qemu_iso_path}-new" "$${qemu_iso_path}"
          # cleaning
          rm -rf "${ISO_WORKING_DIR}"
  - test:
    - exec_local: test -n "$${base_autoinstall_path}"
    # Autoinstall/cloud-init
    - group:
      - exec_local: mkdir -p $${http_directory}/autoinstall
      - exec_local: cp $${base_autoinstall_path} $${http_directory}/autoinstall/user-data
      - exec_local: touch $${http_directory}/autoinstall/meta-data
      # Customize autoinstall
      - exec_local: export CRYPTED_PASS=$(python3 -c "import crypt;print(crypt.crypt('$${root_password}', crypt.mksalt(crypt.METHOD_SHA512)))")
      - exec_local: sed -i -e "s|\(        passwd:\).*|\1 $CRYPTED_PASS|g" $${http_directory}/autoinstall/user-data
    # Preseed
    - group:
      - exec_local: cp $${base_preseed_path} $${http_directory}/preseed.cfg
      # Customize preseed
      - exec_local: sed -i -e 's|\(d-i passwd/root-password password \).*|\1$${root_password}|g' $${http_directory}/preseed.cfg
      - exec_local: sed -i -e 's|\(d-i passwd/root-password-again password \).*|\1$${root_password}|g' $${http_directory}/preseed.cfg
      - exec_local: sed -i -e 's|\(d-i mirror/http/hostname string \).*|\1$${deb_mirror_hostname}|g' $${http_directory}/preseed.cfg
      - exec_local: sed -i -e 's|\(d-i mirror/http/directory string \).*|\1$${deb_mirror_directory}|g' $${http_directory}/preseed.cfg
      - exec_local: sed -i -e 's|\(d-i apt-setup/security_host string \).*|\1$${deb_security_hostname}|g' $${http_directory}/preseed.cfg
      - exec_local: sed -i -e 's|\(d-i apt-setup/security_path string \).*|\1$${deb_security_directory}|g' $${http_directory}/preseed.cfg
