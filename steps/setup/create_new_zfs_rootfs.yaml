- swap_to_the_new_zfs_rootfs:
  - exec_local: |
      set -e
      # Stop the docker container so that we can change the rootfs
      docker stop $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null || docker kill $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
      docker commit $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) $${docker_image}:switch > /dev/null
      docker rm $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) > /dev/null
      rm -f $KAMELEON_WORKDIR/MAIN_CONTAINER_ID
  - exec_local: |
      set -e
      if $${checkpointing_enabled} && [ "$( $${zfs_cmd} get origin $${rootfs_work_dataset}/rootfs -H -o value )" != '-' ]; then
        # If checkpointing is enabled, 
        $${zfs_cmd} snapshot $${rootfs_work_dataset}/rootfs@switch
        $${zfs_cmd} promote $${rootfs_work_dataset}/rootfs
        while $${zfs_cmd} list $${rootfs_work_dataset}/checkpoints -H >& /dev/null; do
          $${zfs_cmd} destroy $${rootfs_work_dataset}/checkpoints -R -f || (echo "retring in 1s" 1>&2; sleep 1)
        done
      fi
      $${zfs_cmd} set mountpoint=none $${rootfs_work_dataset}/rootfs
      i=0
      while $${zfs_cmd} list $${rootfs_work_dataset}/rootfs$i -H >& /dev/null; do
        ((++i));
      done
      if $${checkpointing_enabled}; then
        j=0
        while $${zfs_cmd} list $${rootfs_work_dataset}/checkpoints$j -H >& /dev/null; do
          ((++j));
        done
        $${zfs_cmd} rename $${rootfs_work_dataset}/rootfs $${rootfs_work_dataset}/checkpoints$j
        $${zfs_cmd} clone $${rootfs_work_dataset}/checkpoints$j@switch $${rootfs_work_dataset}/rootfs$i
      else
        $${zfs_cmd} rename $${rootfs_work_dataset}/rootfs $${rootfs_work_dataset}/rootfs$i
      fi
      $${zfs_cmd} create $${rootfs_work_dataset}/rootfs -o mountpoint=$${rootfs_host_work_dir}
  - exec_local: |
      set -e
      docker run -d -u $${docker_user} -i -h $${docker_hostname} --cidfile $KAMELEON_WORKDIR/MAIN_CONTAINER_ID -v $${rootfs_host_work_dir}:$${rootfs_container_work_dir} $${docker_extra_volumes} --privileged $${docker_image}:switch cat > /dev/null
      while ! [ -s $KAMELEON_WORKDIR/MAIN_CONTAINER_ID ] || ! docker exec -u $${docker_user} -i $(< $KAMELEON_WORKDIR/MAIN_CONTAINER_ID) true; do sleep 1; done
  - reload_context: out
  - reload_context: in
