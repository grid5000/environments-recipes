write_local:
  - exec_local: |
      mkdir -p $(dirname @1);
      cat >@1 <<EOF_KAMELEON_INTERNAL
      @2
      EOF_KAMELEON_INTERNAL

write_in:
  - exec_in: |
      mkdir -p $(dirname @1);
      cat >@1 <<EOF_KAMELEON_INTERNAL
      @2
      EOF_KAMELEON_INTERNAL

write_out:
  - exec_out: |
      mkdir -p $(dirname @1);
      cat >@1 <<EOF_KAMELEON_INTERNAL
      @2
      EOF_KAMELEON_INTERNAL

append_local:
  - exec_local: |
      mkdir -p $(dirname @1);
      cat >>@1 <<EOF_KAMELEON_INTERNAL
      @2
      EOF_KAMELEON_INTERNAL

append_in:
  - exec_in: |
      mkdir -p $(dirname @1);
      cat >>@1 <<EOF_KAMELEON_INTERNAL
      @2
      EOF_KAMELEON_INTERNAL

append_out:
  - exec_out: |
      mkdir -p $(dirname @1);
      cat >>@1 <<EOF_KAMELEON_INTERNAL
      @2
      EOF_KAMELEON_INTERNAL

write_raw_local:
  - exec_local: |
      mkdir -p $(dirname @1);
      cat >@1 <<'EOF_KAMELEON_INTERNAL'
      @2
      EOF_KAMELEON_INTERNAL

write_raw_in:
  - exec_in: |
      mkdir -p $(dirname @1);
      cat >@1 <<'EOF_KAMELEON_INTERNAL'
      @2
      EOF_KAMELEON_INTERNAL

write_raw_out:
  - exec_out: |
      mkdir -p $(dirname @1);
      cat >@1 <<'EOF_KAMELEON_INTERNAL'
      @2
      EOF_KAMELEON_INTERNAL

append_raw_local:
  - exec_local: |
      mkdir -p $(dirname @1);
      cat >>@1 <<'EOF_KAMELEON_INTERNAL'
      @2
      EOF_KAMELEON_INTERNAL

append_raw_in:
  - exec_in: |
      mkdir -p $(dirname @1);
      cat >>@1 <<'EOF_KAMELEON_INTERNAL'
      @2
      EOF_KAMELEON_INTERNAL

append_raw_out:
  - exec_out: |
      mkdir -p $(dirname @1);
      cat >>@1 <<'EOF_KAMELEON_INTERNAL'
      @2
      EOF_KAMELEON_INTERNAL

local2out:
  - exec_out: |
      mkdir -p $(dirname @2)
  - pipe:
      - exec_local: cat @1
      - exec_out: cat > @2

local2in:
  - exec_in: mkdir -p $(dirname @2)
  - pipe:
      - exec_local: cat @1
      - exec_in: cat > @2

out2local:
  - exec_local: mkdir -p $(dirname @2)
  - pipe:
      - exec_out: cat @1
      - exec_local: cat > @2

out2in:
  - exec_in: mkdir -p $(dirname @2)
  - pipe:
      - exec_out: cat @1
      - exec_in: cat > @2

in2local:
  - exec_local: mkdir -p $(dirname @2)
  - pipe:
      - exec_in: cat @1
      - exec_local: cat > @2

in2out:
  - exec_out: mkdir -p $(dirname @2)
  - pipe:
      - exec_in: cat @1
      - exec_out: cat > @2

check_cmd_out:
  - rescue:
    - exec_out: command -V @1 2> /dev/null
    - breakpoint: "@1 is missing from out_context"

check_cmd_local:
  - on_bootstrap_init:
    - rescue:
      - exec_local: command -V @1 2> /dev/null
      - breakpoint: "@1 is missing from local_context"

check_cmd_in:
  - rescue:
    - exec_in: command -V @1 2> /dev/null
    - breakpoint: "@1 is missing from in_context"

umount_out:
  - exec_out: |
      echo "try umount @1..." ; mountpoint -q "@1" && umount -f -l "@1" || true

umount_local:
  - exec_local: |
      echo "try umount @1..." ; mountpoint -q "@1" && umount -f -l "@1" || true

umount_in:
  - exec_in: |
      echo "try umount @1..." ; mountpoint -q "@1" && umount -f -l "@1" || true

download_file_in:
  - exec_in: __download "@1" "@2"

download_file_out:
  - exec_out: __download "@1" "@2"

download_file_local:
  - exec_local: __download "@1" "@2"

apt-get_in:
  - exec_in: DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes @1 2>&1

apt-get_out:
  - exec_out: DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes @1 2>&1

setup-system-fs-chroot_in:
  - exec_out: &1 |
      set -e
      if [ -e $KAMELEON_WORKDIR/.KAMELEON_SYSTEM_FS_CHROOT_IN ]; then
        for d in dev dev/pts proc sys; do
          mkdir -p $${rootfs}/$d
          mount --bind /$d $${rootfs}/$d
          echo "mount $d in $${rootfs}/$d"
        done
        if [ -e $${rootfs}/etc/resolv.conf -o -h $${rootfs}/etc/resolv.conf ]; then
          if ! [ -e $${rootfs}/etc/.resolv.conf.kameleon -o -h $${rootfs}/etc/.resolv.conf.kameleon ]; then
            mv -v $${rootfs}/etc/resolv.conf $${rootfs}/etc/.resolv.conf.kameleon
          else
            rm $${rootfs}/etc/resolv.conf
          fi
        fi
        cp -v /etc/resolv.conf $${rootfs}/etc/resolv.conf
      fi

unsetup-system-fs-chroot_in:
  - exec_out: &2 |
      set -e
      if [ -e $KAMELEON_WORKDIR/.KAMELEON_SYSTEM_FS_CHROOT_IN ]; then
        for d in dev dev/pts proc sys; do
          mountpoint -q $${rootfs}/$d && umount -f -l $${rootfs}/$d || true
        done
        if [ -e $${rootfs}/etc/.resolv.conf.kameleon -o -h $${rootfs}/etc/.resolv.conf.kameleon ]; then
          rm $${rootfs}/etc/resolv.conf
          mv -v $${rootfs}/etc/.resolv.conf.kameleon $${rootfs}/etc/resolv.conf
        fi
        rm $KAMELEON_WORKDIR/.KAMELEON_SYSTEM_FS_CHROOT_IN
      fi

configure-system-fs-chroot_in:
  - exec_out: touch $KAMELEON_WORKDIR/.KAMELEON_SYSTEM_FS_CHROOT_IN
  - exec_out: *1
  - on_setup_clean:
      - exec_out: *2

