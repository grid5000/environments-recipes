enabled?:
  - exec_local: ! test -f $${checkpoint_disabled_file}
  - exec_local: test -e "$${image_disk}.$${image_format}"

create:
  - exec_local: |
      parent_of_@microstep_id="$(readlink $${image_disk}).$${image_format}"
      pushd $${kameleon_cwd}/checkpoints
      rm -f @microstep_id_checkpoint.qcow2
      qemu-img create -f qcow2 "@microstep_id_checkpoint.qcow2" \
                      -o backing_file=$(basename "$parent_of_@microstep_id")
      popd
      ln -sf $${kameleon_cwd}/checkpoints/@microstep_id_checkpoint.qcow2 $${image_disk}.$${image_format}
      lsmod | grep nbd >/dev/null || modprobe nbd max_part=63
      echo "sync" ; sync
      qemu-nbd -d $${nbd_device}
      qemu-nbd -c $${nbd_device} "$(readlink $${image_disk}.$${image_format})"

apply:
  - exec_local: |
      # apply command use the backing file that represent the real state to restore
      previous_id=$(qemu-img info "checkpoints/@microstep_id_checkpoint.qcow2" \
                    | grep backing \
                    | sed -e 's/.*checkpoints\/\(.*\)_checkpoint.qcow2\(.*\)/\1/p' \
                    | uniq)
      ln -sf "$${kameleon_cwd}/checkpoints/${previous_id}_checkpoint.qcow2" "$${image_disk}.$${image_format}"

clear:
  - exec_local: |
      if [ -d "$${kameleon_cwd}/checkpoints" ] ; then
        ls $${kameleon_cwd}/checkpoints/ | \
          xargs -I {} bash -c "echo Removing $${kameleon_cwd}/checkpoints/{} ; rm $${kameleon_cwd}/checkpoints/{}"
        rm -f $${image_disk}.$${image_format}
      fi

list:
  - exec_local: |
      if [ -d "$${kameleon_cwd}/checkpoints" ] ; then
        ls $${kameleon_cwd}/checkpoints/ | sed -e 's/\(.*\)_checkpoint.qcow2/\1/p' | uniq
      fi
